// Import variables and mixins
@import 'variables';
@import 'mixins';

// Reset and base styles
*,
*::before,
*::after {
    box-sizing: border-box;
    margin: 0;
    padding: 0;
}

html {
    font-size: 16px;
    height: 100%;
}

body {
    font-family: $font-family-sans-serif;
    font-size: $font-size-base;
    line-height: 1.5;
    color: $gray-800;
    background-color: $gray-100;
    min-height: 100vh;
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
}

h1,
h2,
h3,
h4,
h5,
h6 {
    margin-bottom: $spacer-2;
    font-weight: $font-weight-bold;
    line-height: 1.2;
}

h1 {
    font-size: $font-size-base * 2.5;
}

h2 {
    font-size: $font-size-base * 2;
}

h3 {
    font-size: $font-size-base * 1.75;
}

h4 {
    font-size: $font-size-base * 1.5;
}

h5 {
    font-size: $font-size-base * 1.25;
}

h6 {
    font-size: $font-size-base;
}

p {
    margin-bottom: $spacer-3;
}

a {
    color: $primary-color;
    text-decoration: none;
    @include transition;

    &:hover {
        color: darken($primary-color, 15%);
        text-decoration: underline;
    }
}

ul,
ol {
    margin-bottom: $spacer-3;
    padding-left: $spacer-4;
}

// Button styles
button,
.btn {
    display: inline-block;
    font-weight: $font-weight-normal;
    text-align: center;
    vertical-align: middle;
    user-select: none;
    border: $border-width solid transparent;
    padding: $spacer-2 $spacer-3;
    font-size: $font-size-base;
    line-height: 1.5;
    border-radius: $border-radius;
    @include transition;
    cursor: pointer;

    &:focus {
        outline: 0;
    }
}

.btn-primary {
    @include button-variant($primary-color, $primary-color, $white-color);
}

.btn-secondary {
    @include button-variant($secondary-color, $secondary-color, $white-color);
}

.btn-success {
    @include button-variant($success-color, $success-color, $white-color);
}

.btn-danger {
    @include button-variant($danger-color, $danger-color, $white-color);
}

.btn-warning {
    @include button-variant($warning-color, $warning-color, $dark-color);
}

.btn-sm {
    padding: $spacer-1 $spacer-2;
    font-size: $font-size-sm;
    border-radius: $border-radius-sm;
}

// Form styles
input,
textarea,
select {
    display: block;
    width: 100%;
    padding: $spacer-2;
    font-size: $font-size-base;
    line-height: 1.5;
    color: $gray-700;
    background-color: $white-color;
    border: $border-width solid $gray-400;
    border-radius: $border-radius;
    @include transition;

    &:focus {
        border-color: lighten($primary-color, 25%);
        outline: 0;
        box-shadow: 0 0 0 0.2rem rgba($primary-color, 0.25);
    }
}

label {
    display: inline-block;
    margin-bottom: $spacer-2;
}

// Container
.container {
    width: 100%;
    padding-right: $spacer-3;
    padding-left: $spacer-3;
    margin-right: auto;
    margin-left: auto;
    max-width: 1140px;
}

// Grid system using flexbox
.row {
    display: flex;
    flex-wrap: wrap;
    margin-right: -$spacer-3;
    margin-left: -$spacer-3;
}

.col {
    flex-basis: 0;
    flex-grow: 1;
    max-width: 100%;
    padding-right: $spacer-3;
    padding-left: $spacer-3;
}

// Responsive columns
@for $i from 1 through 12 {
    .col-#{$i} {
        flex: 0 0 percentage($i / 12);
        max-width: percentage($i / 12);
        padding-right: $spacer-3;
        padding-left: $spacer-3;
    }

    @include respond-to(sm) {
        .col-sm-#{$i} {
            flex: 0 0 percentage($i / 12);
            max-width: percentage($i / 12);
        }
    }

    @include respond-to(md) {
        .col-md-#{$i} {
            flex: 0 0 percentage($i / 12);
            max-width: percentage($i / 12);
        }
    }

    @include respond-to(lg) {
        .col-lg-#{$i} {
            flex: 0 0 percentage($i / 12);
            max-width: percentage($i / 12);
        }
    }
}

// Card component
.card {
    @include card;
    margin-bottom: $spacer-3;
}

// Utilities
.text-center {
    text-align: center;
}

.text-right {
    text-align: right;
}

.text-left {
    text-align: left;
}

.d-flex {
    display: flex;
}

.d-block {
    display: block;
}

.d-none {
    display: none;
}

.justify-content-between {
    justify-content: space-between;
}

.justify-content-center {
    justify-content: center;
}

.align-items-center {
    align-items: center;
}

.mb-1 {
    margin-bottom: $spacer-1;
}

.mb-2 {
    margin-bottom: $spacer-2;
}

.mb-3 {
    margin-bottom: $spacer-3;
}

.mb-4 {
    margin-bottom: $spacer-4;
}

.mb-5 {
    margin-bottom: $spacer-5;
}

.mt-1 {
    margin-top: $spacer-1;
}

.mt-2 {
    margin-top: $spacer-2;
}

.mt-3 {
    margin-top: $spacer-3;
}

.mt-4 {
    margin-top: $spacer-4;
}

.mt-5 {
    margin-top: $spacer-5;
}

.ml-auto {
    margin-left: auto;
}

.mr-auto {
    margin-right: auto;
}

.py-3 {
    padding-top: $spacer-3;
    padding-bottom: $spacer-3;
}

.px-3 {
    padding-left: $spacer-3;
    padding-right: $spacer-3;
}

.text-primary {
    color: $primary-color;
}

.text-success {
    color: $success-color;
}

.text-danger {
    color: $danger-color;
}

.text-warning {
    color: $warning-color;
}

// Responsive utilities
@include respond-to(xs) {
    .d-xs-none {
        display: none;
    }

    .d-xs-block {
        display: block;
    }

    .d-xs-flex {
        display: flex;
    }
}

@include respond-to(sm) {
    .d-sm-none {
        display: none;
    }

    .d-sm-block {
        display: block;
    }

    .d-sm-flex {
        display: flex;
    }
}

@include respond-to(md) {
    .d-md-none {
        display: none;
    }

    .d-md-block {
        display: block;
    }

    .d-md-flex {
        display: flex;
    }
}

@include respond-to(lg) {
    .d-lg-none {
        display: none;
    }

    .d-lg-block {
        display: block;
    }

    .d-lg-flex {
        display: flex;
    }
}